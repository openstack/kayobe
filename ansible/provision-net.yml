---
- name: Check whether Ironic is enabled
  hosts: controllers
  gather_facts: False
  tags:
    - provision-net
    - cleaning-net
    - inspection-net
  tasks:
    - name: Create controllers group with ironic enabled
      group_by:
        key: "controllers_for_provision_net_{{ kolla_enable_ironic | bool }}"
      changed_when: false

- name: Ensure inspection, provisioning and cleaning networks and subnets are registered in neutron
  # Only required to run on a single host.
  hosts: controllers_for_provision_net_True[0]
  vars:
    venv: "{{ virtualenv_path }}/openstacksdk"
    inspection_net:
      name: "{{ kolla_ironic_inspection_network }}"
      mtu: "{{ inspection_net_name | net_mtu | default(omit, True) }}"
      provider_network_type: "{% if inspection_net_name | net_vlan %}vlan{% else %}flat{% endif %}"
      provider_physical_network: "{{ inspection_net_name | net_physical_network | default('physnet1', True) }}"
      provider_segmentation_id: "{{ inspection_net_name | net_vlan }}"
      # Flat networks need to be shared to allow instances to use them.
      shared: "{{ (inspection_net_name | net_vlan) is none }}"
      subnets:
        - name: "{{ kolla_ironic_inspection_network }}"
          cidr: "{{ inspection_net_name | net_cidr }}"
          gateway_ip: "{{ inspection_net_name | net_neutron_gateway or provision_wl_net_name | net_gateway | default(omit, True) }}"
          allocation_pool_start: "{{ inspection_net_name | net_neutron_allocation_pool_start }}"
          allocation_pool_end: "{{ inspection_net_name | net_neutron_allocation_pool_end }}"
    provision_net:
      name: "{{ kolla_ironic_provisioning_network }}"
      mtu: "{{ provision_wl_net_name | net_mtu | default(omit, True) }}"
      provider_network_type: "{% if provision_wl_net_name | net_vlan %}vlan{% else %}flat{% endif %}"
      provider_physical_network: "{{ provision_wl_net_name | net_physical_network | default('physnet1', True) }}"
      provider_segmentation_id: "{{ provision_wl_net_name | net_vlan }}"
      # Flat networks need to be shared to allow instances to use them.
      shared: "{{ (provision_wl_net_name | net_vlan) is none }}"
      subnets:
        - name: "{{ kolla_ironic_provisioning_network }}"
          cidr: "{{ provision_wl_net_name | net_cidr }}"
          gateway_ip: "{{ provision_wl_net_name | net_neutron_gateway or provision_wl_net_name | net_gateway | default(omit, True) }}"
          allocation_pool_start: "{{ provision_wl_net_name | net_neutron_allocation_pool_start }}"
          allocation_pool_end: "{{ provision_wl_net_name | net_neutron_allocation_pool_end }}"
    cleaning_net:
      name: "{{ kolla_ironic_cleaning_network }}"
      mtu: "{{ cleaning_net_name | net_mtu | default(omit, True) }}"
      provider_network_type: "{% if cleaning_net_name | net_vlan %}vlan{% else %}flat{% endif %}"
      provider_physical_network: "{{ cleaning_net_name | net_physical_network | default('physnet1', True) }}"
      provider_segmentation_id: "{{ cleaning_net_name | net_vlan }}"
      # Flat networks need to be shared to allow instances to use them.
      shared: "{{ (cleaning_net_name | net_vlan) is none }}"
      subnets:
        - name: "{{ kolla_ironic_cleaning_network }}"
          cidr: "{{ cleaning_net_name | net_cidr }}"
          gateway_ip: "{{ cleaning_net_name | net_neutron_gateway or cleaning_net_name | net_gateway | default(omit, True) }}"
          allocation_pool_start: "{{ cleaning_net_name | net_neutron_allocation_pool_start }}"
          allocation_pool_end: "{{ cleaning_net_name | net_neutron_allocation_pool_end }}"
    network_registrations: "{{ [provision_net] + ([] if cleaning_net_name == provision_wl_net_name else [cleaning_net]) }}"
  tags:
    - provision-net
    - cleaning-net
    - inspection-net
  tasks:
    - name: Validate OpenStack password authentication parameters
      fail:
        msg: >
          Required OpenStack authentication parameter {{ item }} is
          {% if item in openstack_auth %}empty{% else %}not present{% endif %}
          in openstack_auth. Have you sourced the environment file?
      when:
        - openstack_auth_type == 'password'
        - item not in openstack_auth or not openstack_auth[item]
      with_items: "{{ openstack_auth_password_required_params }}"
      tags:
        - config-validation

    - import_role:
        name: stackhpc.openstack.os_networks
      vars:
        os_openstacksdk_install_epel: "{{ dnf_install_epel }}"
        os_openstacksdk_state: "latest"
        os_networks_upper_constraints_file: "{{ openstacksdk_upper_constraints_file }}"
        os_networks_venv: "{{ venv }}"
        os_networks_auth_type: "{{ openstack_auth_type }}"
        os_networks_auth: "{{ openstack_auth }}"
        os_networks_cacert: "{{ openstack_cacert | default(omit, true) }}"
        os_networks_interface: "{{ openstack_interface | default(omit, true) }}"
        # Network configuration.
        os_networks: "{{ network_registrations }}"
